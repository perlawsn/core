package org.dei.perla.channel.simulator;

import static org.hamcrest.CoreMatchers.anyOf;
import static org.hamcrest.CoreMatchers.both;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.number.OrderingComparison.greaterThanOrEqualTo;
import static org.hamcrest.number.OrderingComparison.lessThanOrEqualTo;
import static org.junit.Assert.assertThat;

import java.time.ZonedDateTime;

import org.dei.perla.channel.simulator.Generator.BooleanFieldGenerator;
import org.dei.perla.channel.simulator.Generator.FloatFieldGenerator;
import org.dei.perla.channel.simulator.Generator.IntFieldGenerator;
import org.dei.perla.channel.simulator.Generator.StaticFieldGenerator;
import org.dei.perla.channel.simulator.Generator.StringFieldGenerator;
import org.dei.perla.channel.simulator.Generator.TimestampFieldGenerator;
import org.junit.Test;

public class ValueGeneratorTest {

	@Test
	public void testIntValueGenerator() {
		final int min = -10;
		final int max = 2000;
		IntFieldGenerator generator = new IntFieldGenerator("integer", min, max);

		for (int i = 0; i < 1000; i++) {
			assertThat(
					generator.generateValue(),
					is(both(greaterThanOrEqualTo(min)).and(
							lessThanOrEqualTo(max))));
		}
	}

	@Test
	public void testFloatValueGenerator() {
		final float min = -80;
		final float max = 20420;
		FloatFieldGenerator generator = new FloatFieldGenerator("float", min,
				max);

		// Accounting for errors generated by the variable precision float
		for (int i = 0; i < 1000; i++) {
			assertThat(
					generator.generateValue(),
					is(both(greaterThanOrEqualTo(min - 1)).and(
							lessThanOrEqualTo(max + 1))));
		}
	}

	@Test
	public void testStringValueGenerator() {
		final int minLength = 3;
		final int maxLength = 45;
		StringFieldGenerator generator = new StringFieldGenerator("string",
				minLength, maxLength);

		for (int i = 0; i < 1000; i++) {
			assertThat(
					generator.generateValue().length(),
					is(both(greaterThanOrEqualTo(minLength)).and(
							lessThanOrEqualTo(maxLength))));
		}
	}

	@Test
	public void testBooleanValueGenerator() {
		BooleanFieldGenerator generator = new BooleanFieldGenerator("boolean");

		for (int i = 0; i < 1000; i++) {
			assertThat(generator.generateValue(),
					anyOf(equalTo(true), equalTo(false)));
		}
	}
	
	@Test
	public void testTimestampFieldGenerator() {
		TimestampFieldGenerator generator = new TimestampFieldGenerator("timestamp");
		
		ZonedDateTime generated = generator.generateValue();
		ZonedDateTime now = ZonedDateTime.now();
		assertThat(generated.getYear(), equalTo(now.getYear()));
		assertThat(generated.getMonth(), equalTo(now.getMonth()));
		assertThat(generated.getDayOfMonth(), equalTo(now.getDayOfMonth()));
	}

	@Test
	public void testStaticValueGenerator() {
		String value = "test_value";
		StaticFieldGenerator generator = new StaticFieldGenerator("static",
				value);

		for (int i = 0; i < 1000; i++) {
			assertThat(generator.generateValue(), equalTo(value));
		}
	}

}
