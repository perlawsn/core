package org.dei.perla.core.sample;

import org.dei.perla.core.descriptor.DataType;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * A {@code Sample} of {@link Attribute} values generated by the PerLa system.
 *
 * @author Guido Rota (2014)
 *
 */
public class Sample {

	/**
	 * Empty immutable sample
	 */
	public static final Sample EMPTY =
            new Sample(Collections.emptyList(), new Object[0]);

    private final List<Attribute> fields;
    private final Object[] values;

    public Sample(List<Attribute> fields, Object[] values) {
        this.fields = Collections.unmodifiableList(fields);
        this.values = values;
    }

    public static Sample from(Map<Attribute, Object> entries) {
        Attribute[] fields = new Attribute[entries.size()];
        Object[] values = new Object[entries.size()];

        int i = 0;
        for (Map.Entry<Attribute, Object> e : entries.entrySet()) {
            fields[i] = e.getKey();
            values[i] = e.getValue();
            i++;
        }

        return new Sample(Arrays.asList(fields), values);
    }

    private int getIndex(String name) {
        int idx = 0;
        for (Attribute a : fields) {
            if (a.getId().equals(name)) {
                return idx;
            }
            idx++;
        }
        return -1;
    }

	/**
	 * Checks whether the {@code Sample} contains the specified field
	 *
	 * @param name Field name
	 * @return true if the sample contains the field, false otherwise
	 */
	public boolean hasField(String name) {
        return getIndex(name) != -1;
    }

    /**
     * Returns the list of fields contained within the {@code Sample}.
     *
     * The implementation of the PerLa Middleware ensures the consistency
     * between the order of the {@link Attributes} returned in this list and
     * their respective values in the field array.
     */
    public List<Attribute> fields() {
        return fields;
    }

	/**
	 * Returns the array containing all fields in the
	 * {@code Sample}
	 *
	 * @return Set of fields in the <code>Sample</code>
	 */
	public Object[] values() {
        return values;
    }

	/**
	 * Returns the value of a field contained in the {@code Sample}.
     *
	 * @param name field name
	 * @return Field value
	 */
	public Object getValue(String name) {
        int idx = getIndex(name);
        if (idx == -1) {
            return null;
        }
        return values[idx];
    }

    public DataType getType(String name) {
        int idx = getIndex(name);
        if (idx == -1) {
            return null;
        }
        return fields.get(idx).getType();
    }

	/**
	 * Indicates whether the {@code Sample} is empty (i.e., no fields) or not.
	 *
	 * @return true if the {@code Sample} does not contain any field, false
	 *         otherwise
	 */
	public boolean isEmpty() {
        return fields.isEmpty();
    }

}
