package org.dei.perla.core.fpc.base;

import org.dei.perla.core.sample.Attribute;
import org.dei.perla.core.sample.Sample;
import org.dei.perla.core.sample.SamplePipeline;
import org.dei.perla.core.sample.SamplePipeline.PipelineBuilder;

import java.time.Instant;
import java.util.*;

/**
 * @author Guido Rota 02/07/15.
 */
public final class Request {

    private final BaseFpc fpc;
    private final List<Attribute> request;

    private final boolean hasTimestamp;
    private final int timestampIndex;
    private final List<Attribute> staticReq = new ArrayList<>();
    private final Map<Attribute, Object> staticValues = new HashMap<>();
    private final Object[] staticSample;
    private final List<Attribute> dynamicReq = new ArrayList<>();

    public Request(BaseFpc fpc, List<Attribute> request) {
        this.fpc = fpc;
        this.request = Collections.unmodifiableList(request);

        int tsIdx = -1;
        Map<Attribute, Object> staticFpc = fpc.getStaticAttributes();
        int i = 0;
        for (Attribute a : request) {
            if (a == Attribute.TIMESTAMP) {
                // Skip timestamp attribute, it's implicit in every request,
                // and it's generated by the SamplePipeline when needed
                tsIdx = i;
            } else if (staticFpc.containsKey(a)) {
                staticReq.add(a);
                staticValues.put(a, staticFpc.get(a));
            } else {
                dynamicReq.add(a);
            }
            i++;
        }

        if (isStatic()) {
            if (tsIdx == -1) {
                staticReq.add(Attribute.TIMESTAMP);
                tsIdx = staticReq.size() - 1;
            }
            staticSample = precomputeStaticSample();
        } else {
            staticSample = null;
        }

        hasTimestamp = tsIdx != -1;
        timestampIndex = tsIdx;
    }

    private Object[] precomputeStaticSample() {
        Object[] o = new Object[staticReq.size()];
        int i = 0;
        for (Attribute a : staticReq) {
            if (a == Attribute.TIMESTAMP) {
                o[i] = Instant.now();
            } else {
                o[i] = staticValues.get(a);
            }
            i++;
        }
        return o;
    }

    public List<Attribute> getRequest() {
        return request;
    }

    public boolean isStatic() {
        return dynamicReq.isEmpty();
    }

    public List<Attribute> getStatic() {
        return staticReq;
    }

    public List<Attribute> getDynamic() {
        return dynamicReq;
    }

    /**
     * Creates a new {@link Sample} using the static {@link Fpc} {@link
     * Attributes}.
     *
     * @return new {@link Sample} instance
     * @throws RuntimeException if the {@code Request} is not completely static
     */
    public Sample newStaticSample() throws RuntimeException {
        if (!isStatic()) {
            throw new RuntimeException("Cannot create static sample from " +
                    "non-static request");
        }

        Object[] values = Arrays.copyOf(staticSample, staticSample.length);
        values[timestampIndex] = Instant.now();
        return new Sample(staticReq, values);
    }

    public SamplePipeline createPipeline(List<Attribute> opAtts)
            throws RuntimeException {
        if (isStatic()) {
            throw new RuntimeException(
                    "Cannot create pipeline, request is static");
        }

        PipelineBuilder build = SamplePipeline.newBuilder(opAtts);
        if (!hasTimestamp) {
            build.addTimestamp();
        }
        if (staticReq.size() != 0) {
            build.addStatic(staticValues);
        }
        build.reorder(request);
        return build.create();
    }

}
