package org.dei.perla.core.fpc;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * A container of of {@link Attribute} values generated by the PerLa system.
 *
 * @author Guido Rota (2014)
 */
public final class Sample {

    private final List<Attribute> fields;
    private final Object[] values;

    /**
     * Creates a new sample with the desired fields and field values.
     *
     * <p>
     * The caller must ensure that there is a one-to-one positional
     * correspondance between the attributes inside the {@code fields} list
     * and their values in the {@code values} array.
     *
     * <p>
     * Moreover, it is up to the caller (i.e., the PerLa core Middleware) to
     * ensure that the {@code fields} list does not contain 2 attributes with
     * the same name.
     *
     * @param fields list of fields that compose the sample
     * @param values values of the fields
     */
    public Sample(List<Attribute> fields, Object[] values) {
        this.fields = Collections.unmodifiableList(fields);
        this.values = values;
    }

    /**
     * A convenience method for converting an attribute-value map into a
     * {@link Sample}. Due to its O(n) running time, the {@link Sample}
     * constructor is to be preferred over this method when performances are
     * critical.
     *
     * @param entries attribute-value map used to populate the Sample
     * @return new Sample view of the entry map passed as input.
     */
    public static Sample from(Map<Attribute, Object> entries) {
        Attribute[] fields = new Attribute[entries.size()];
        Object[] values = new Object[entries.size()];

        int i = 0;
        for (Map.Entry<Attribute, Object> e : entries.entrySet()) {
            fields[i] = e.getKey();
            values[i] = e.getValue();
            i++;
        }

        return new Sample(Arrays.asList(fields), values);
    }

    /**
     * Returns the index of the given field
     *
     * @param name field name
     * @return index of the field
     */
    private int getIndex(String name) {
        int idx = 0;
        for (Attribute a : fields) {
            if (a.getId().equals(name)) {
                return idx;
            }
            idx++;
        }
        return -1;
    }

	/**
	 * Checks whether the {@link Sample} contains the specified field
	 *
	 * @param name Field name
	 * @return true if the sample contains the field, false otherwise
	 */
	public boolean hasField(String name) {
        return getIndex(name) != -1;
    }

    /**
     * Returns the list of fields contained within the {@link Sample}.
     *
     * The implementation of the PerLa Middleware ensures the consistency
     * between the order of the {@link Attribute}s returned in this list and
     * their respective values in the field array.
     *
     * @return list of all fields contained in the {@link Sample}
     */
    public List<Attribute> fields() {
        return fields;
    }

	/**
	 * Returns the array containing all fields in the
	 * {@link Sample}
	 *
	 * @return Set of fields in the {@link Sample}
	 */
	public Object[] values() {
        return values;
    }

	/**
	 * Returns the value of a field contained in the {@link Sample}.
     *
	 * @param name field name
	 * @return field value
	 */
	public Object getValue(String name) {
        int idx = getIndex(name);
        if (idx == -1) {
            return null;
        }
        return values[idx];
    }

    /**
     * Returns the type of a field contained in the {@link Sample}.
     *
     * @param name field name
     * @return field value
     */
    public DataType getType(String name) {
        int idx = getIndex(name);
        if (idx == -1) {
            return null;
        }
        return fields.get(idx).getType();
    }

	/**
	 * Indicates whether the {@link Sample} is empty (i.e., no fields) or not.
	 *
	 * @return true if the {@link Sample} does not contain any field, false
	 *         otherwise
	 */
	public boolean isEmpty() {
        return fields.isEmpty();
    }

}
