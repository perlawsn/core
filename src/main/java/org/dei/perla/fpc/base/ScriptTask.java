package org.dei.perla.fpc.base;

import java.util.List;

import org.dei.perla.fpc.TaskHandler;
import org.dei.perla.fpc.engine.Executor;
import org.dei.perla.fpc.engine.Record;
import org.dei.perla.fpc.engine.Runner;
import org.dei.perla.fpc.engine.Script;
import org.dei.perla.fpc.engine.ScriptHandler;

/**
 * <p>
 * An object for controlling the asynchronous execution of a single
 * {@link Script}. {@code ScriptTask}s are used to control Set or Get operation;
 * as such, they terminate as soon as the associated {@link Script} stops.
 * </p>
 * 
 * <p>
 * All {@link Record}s generated by the {@link Script} are notified to the
 * interested components through one or more invocations of the
 * {@link TaskHandler} passed as parameter.
 * </p>
 * 
 * @author Guido Rota (2014)
 *
 */
public class ScriptTask extends AbstractTask {

	private final Runner runner;

	protected ScriptTask(OneoffOperation operation, TaskHandler handler,
			RecordPipeline pipeline) {
		super(operation, handler, pipeline);
		this.runner = Executor.execute(operation.getScript(),
				new OneoffScriptHandler());
	}

	@Override
	public void doStop() {
		runner.cancel();
	}

	/**
	 * Custom {@link ScriptHandler} used for collecting the results of the
	 * {@link Script} and for switching the {@code ScriptTask} state (running /
	 * not running).
	 * 
	 * @author Guido Rota (2014)
	 *
	 */
	private class OneoffScriptHandler implements ScriptHandler {

		@Override
		public void complete(List<Record> recordList) {
			for (Record record : recordList) {
				processRecord(record);
			}
			notifyComplete();
		}

		@Override
		public void error(Throwable cause) {
			notifyError(cause, true);
		}

	}

}
